name: rpm build

on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
  oclifpack:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout cli
        uses: actions/checkout@v2
      - name: create package
        run: | 
            npm cache clear & npm ci
            npm install -g @oclif/dev-cli
            oclif-dev pack --targets=linux-x64
      - name: upload package
        uses: actions/upload-artifact@v2
        with:
            name: my-artifact
            path: dist/twilio-v2.27.1/twilio-v2.27.1-linux-x64.tar.gz
  removeartifact:
    runs-on: ubuntu-latest
    needs: [oclifpack]
    steps:
      - name: remove artifact
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
                const response = await github.request(`GET /repos/${{github.repository}}/actions/runs/${{ github.run_id }}/artifacts`)
                for (artifact of response.data.artifacts) {
                  console.log(`Deleting artifact with id ${artifact.id}`)
                  const deleteResponse = await github.request(`DELETE /repos/${{github.repository}}/actions/artifacts/${artifact.id}`)
                }
    
#   rpmbuild:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: Antikythera/build-rpm@latest
#         id: build_rpm
#         with:
#           spec_file: rpm_assets/hello_world.spec
#           sources: |
#             rpm_assets/hello-world-1.0.1.tar.gz
#           variables: |
#             _version=1.0.1
#             _foo=bar
#       - name: build_rpm outputs
#         run: |
#           echo rpm_package_name: ${{ steps.build_rpm.outputs.rpm_package_name }}
#           echo rpm_package_path: ${{ steps.build_rpm.outputs.rpm_package_path }}
