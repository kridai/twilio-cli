name: Macos Executable Release
on:
  workflow_dispatch:
    inputs:
      formula:
        description: 'Artifact Prefix'
        default: twilio
  workflow_run:
  # wait for Cli Release to complete, when it completes, start this workflow
    workflows: ["Cli Release"]
    branches: [main]
    types:
      - completed
    inputs:
      formula:
        description: 'Artifact Prefix'
        default: twilio
jobs:
  get-tag:
    runs-on: macos-latest
    outputs:
     TAG_NAME: ${{steps.get-tag.outputs.TAG_NAME}}
    steps:
     - uses: actions/checkout@v2
     - name: Getting latest tag
       id: get-tag
       run: |
        git fetch --prune --unshallow
        echo "::set-output name=TAG_NAME::$(git describe --tags $(git rev-list --tags --max-count=1))"
  pack-macos:
    needs: [get-tag]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: apple-actions/import-codesign-certs@v1
      with: 
        p12-file-base64: ${{ secrets.OSX_INSTALLER_CERT_BASE64 }}
        p12-password: ${{ secrets.OSX_INSTALLER_CERT_PASSWORD }}
    - name: import cert
      run: | 
          echo "runner them is " $RUNNER_TEMP
          CERTIFICATE=$RUNNER_TEMP/certificate.p12
          KEYCHAIN=$RUNNER_TEMP/app-signing.keychain
          # import certificate from secrets
          echo -n "$OSX_INSTALLER_CERT_BASE64" | base64 --decode --output $CERTIFICATE
          echo $OSX_INSTALLER_CERT_BASE64
          echo $OSX_INSTALLER_CERT_PASS
          # create temporary keychain
          OSX_KEYCHAIN_PASSWORD="passphrase"
          security list-keychains
          security create-keychain -p "$OSX_KEYCHAIN_PASSWORD" $KEYCHAIN
          security unlock-keychain -p "$OSX_KEYCHAIN_PASSWORD" $KEYCHAIN
          ls $RUNNER_TEMP
          security list-keychains
          #security import $CERTIFICATE_PATH -P "$OSX_KEYCHAIN_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN
          security import $CERTIFICATE -k $KEYCHAIN -f pkcs12 -A -T /usr/bin/codesign -T /usr/bin/security -P "$OSX_INSTALLER_CERT_PASSWORD"
          #security import $CERTIFICATE_PATH -k $KEYCHAIN_PATH -A -P $OSX_INSTALLER_CERT_PASSWORD -T /usr/bin/codesign -T /usr/bin/security
          security find-identity
    - run: sh .github/scripts/pack_macos.sh
      env:
        OSX_INSTALLER_CERT_BASE64: ${{ secrets.OSX_INSTALLER_CERT_BASE64}}
        OSX_INSTALLER_CERT_PASSWORD: ${{ secrets.OSX_INSTALLER_CERT_PASSWORD}}
        APPLE_ID: ${{ secrets.APPLE_ID}}
        APPLE_ID_APP_PASSWORD: ${{ secrets.APPLE_ID_APP_PASSWORD}}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID}}
        FILE_PATH: dist/macos/${{ github.event.inputs.formula }}-v${{ needs.get-tag.outputs.TAG_NAME }}.pkg
    - name: Upload binaries to release
      run: node .github/scripts/update-platform-executables.js
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FILE: dist/macos/${{ github.event.inputs.formula }}-v${{ needs.get-tag.outputs.TAG_NAME }}.pkg
        ASSET_NAME: ${{ github.event.inputs.formula }}-${{ needs.get-tag.outputs.TAG_NAME }}.pkg
        TAG_NAME: ${{ needs.get-tag.outputs.TAG_NAME }}
        REPO_NAME: twilio/twilio-cli

  notify-complete-fail:
    if: ${{ failure() || cancelled() }}
    needs: [pack-macos]
    name: Notify Release Failed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.ALERT_SLACK_WEB_HOOK }}
          SLACK_COLOR: "#ff3333"
          SLACK_USERNAME: CLI Release Bot
          SLACK_ICON_EMOJI: ":ship:"
          SLACK_TITLE: "Twilio Cli"
          SLACK_MESSAGE: 'Macos Executable Release Failed'
          MSG_MINIMAL: actions url
